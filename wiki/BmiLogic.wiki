#summary 完成 BMI 程式
#labels tw

至此，我們已經完成了 bmi 程式的介面設計，並且理解了了新建立的程式。剩下我們要做的，只剩下為 BMI 程式加上程式邏輯囉。

很幸運的是，BMI 程式中用到的並不是什麼神秘的演算法，你甚至可以透過搜尋引擎找到中文的範例。


完整的程式如下：
{{{
    package com.demo.android.bmi;

    import java.text.DecimalFormat;

    import android.app.Activity;
    import android.os.Bundle;
    import android.view.View;
    import android.view.View.OnClickListener;
    import android.widget.Button;
    import android.widget.EditText;
    import android.widget.TextView;

    public class Bmi extends Activity {
        /** Called when the activity is first created. */
        @Override
        public void onCreate(Bundle icicle) {
            super.onCreate(icicle);
            setContentView(R.layout.main);
           
            //Listen for button clicks
            Button button = (Button)findViewById(R.id.submit);
            button.setOnClickListener(calcBMI);
        }

        private OnClickListener calcBMI = new OnClickListener()
        {
            public void onClick(View v)
            {
                DecimalFormat nf = new DecimalFormat("0.0");
                EditText fieldheight = (EditText)findViewById(R.id.height);
                EditText fieldweight = (EditText)findViewById(R.id.weight);
                double height = Double.parseDouble(fieldheight.getText().toString())/100;
                double weight = Double.parseDouble(fieldweight.getText().toString());
                double BMI = weight / (height * height);

                TextView result = (TextView)findViewById(R.id.result);
                result.setText("Your BMI is "+nf.format(BMI));

                //Give health advice
                TextView fieldsuggest = (TextView)findViewById(R.id.suggest);
                if(BMI>25){
                    fieldsuggest.setText(R.string.advice_heavy);
                }else if(BMI<20){
                    fieldsuggest.setText(R.string.advice_light);
                }else{
                    fieldsuggest.setText(R.string.advice_average);
                }
            }
        };
    }
}}}


我們會學到：導入其他用到的模組、如何取得介面元件、如何對按鈕設定動作。

從上面的完整程式中，我們看到上面介紹到的程式主體都還在，不過也增加了一些內容。這些內容即我們的主要程式邏輯。


= 講解 =

{{{
    //Listen for button clicks
}}}

兩個反斜線是 java 語言所支援的另一種註解方式。

{{{
    Button button = (Button)findViewById(R.id.submit);
}}}

宣告一個 button 實體，透過 findViewById 方法，從資源檔中取得對應的介面元件。

R.id.submit 對應到 XML 描述檔的資源是
{{{
    <Button id="@+id/submit"
    />
}}}
為了確保宣告的型別跟 XML 描述檔中描述的介面元件型別一致，好使程式運作正常，我們在 「indViewById」 方法前加上 「(Button)」修飾，強制將取得的資源型別設成 「button」型別。
{{{
button.setOnClickListener(new OnClickListener(){
});
}}}

這句包含了「 button.setOnClickListener」與其中的 「OnClickListener」兩個類別。
「setOnClickListener」是 button （按鈕）實體的方法。


< [AndroidLogic 解讀程式流程] | [DiveIntoAndroid 回目錄] | [BmiRefactor 重構程式] >