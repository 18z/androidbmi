#summary 設計使用者介面
#labels tw

= 視圖 =

我們在前面的過程裡，已經學到如何在 Android 應用程式中替換 TextView 介面元件顯示的純文字內容。那麼...這個經驗能不能直接用到 BMI 應用程式的設計上呢？我們先回過頭來想想 BMI 應用程式最少應該需要什麼些什麼元件。

為了輸入 BMI 程式所需的身高體重值，大致上我們需要兩個 TextView 元件用來提示填入身高體重數字，另外也需要兩個文字輸入欄位用來填入身高體重數字。我們還需要一個按鈕來開始計算，而計算完也需要一個 TextView 元件來顯示計算結果。於是初版的 BMI 應用程式介面的樣子就浮現出來了。

軟體設計的過程中常常會需要頻繁改變使用者介面，改著改著就累積起了一些經驗，也歸納出了許多應對之道。如著名的 MVC 模式。Google Android 為我們考慮了介面修改問題。Android 所採用的解決介面修改問題方式，是採用目前比較流行的解決方案--即如前所見的，將介面描述部份的程式碼，抽取到程式外部的 XML 描述文件中。

=  查閱文件 =

話說回來，我們從哪得知其他介面元件的蹤影呢？其中一個方法是查閱文件。

Android 文件網站上找到各種可用介面元件列表。

    http://code.google.com/android/reference/view-gallery.html


例如我們想查看 EditText 的內容，我們可以點進 EditText 連結查看其內容。
http://code.google.com/android/reference/android/widget/EditText.html

你會看到一個詳細地驚人的網頁。

EditText 繼承了 TextView 介面元件，所以 EditText 擁有所有 TextView 介面元件的特性。此外，你也會看到 EditText 有些特殊屬性，如 「android:numeric」(僅允許輸入數字)，或「android:phoneNumber」(僅允許輸入電話號碼)。我們可以在 XML 描述檔中，透過將 EditText 的參數「android:numeric」 指定為 「true」，以限制使用者只能在 EditText 文字欄位中輸入數字。

一個基本的身高(Height)輸入欄位的 EditText 介面描述如下：
{{{
    <EditText android:id="@+id/height"
        android:layout_width="fill_parent"
        android:layout_height="wrap_content"
        android:numeric="true"
        android:text=""
        />
}}}

可以看到 EditText 介面元件描述的基本的組成與 TextView 介面元件相似，都用到了「android:layout_width」與「android:layout_height」屬性。
另外，指定的另外兩個屬性「android:numeric」、「android:text」則是 EditText 介面元件的特別屬性。
{{{
    android:numeric="true"
    android:text=""
}}}
將 「android:numeric」 指定為 「true」，可以限制使用者只能在 EditText 文字欄位中輸入數字。「android:text」屬性則是指定 EditText 介面元件預設顯示的文字(數字)。
{{{
    <EditText android:id="@+id/height"
        />
}}}
談了 EditText 中的各種「android:」開頭的屬性，還有個擺在各屬性最前頭的「android:id」屬性沒談。程式會透過 android:id 屬性來調用特定介面元件，要使用一個介面元件的第一件事是定義出介面描述檔，之後與這個介面有關的操作，都得根據 android:id 來在程式中調用這個介面元件。

i前面說過，為了易於閱讀(可讀性)，最好將屬性分行列出。而我們的範例卻將 android:id 屬性直接擺在 EditText 標籤後。其實這麼做同樣是為了易於閱讀，當然你也可以將「android:id」屬性分行列出，或是將「android:id」屬性放在屬性列表的中間或最後頭。

android:id 屬性的內容長得比較特別：
{{{
    @+id/height
}}}

「height」是這個介面元件的 android:id。程式中會使用「R.id.height」來取得這個介面元件。「＠+id」 的意思是「R」類別會自動配置一個位址給這個 android:id。「R」類別的內容可以透過查看 R.java 得知。
打開 R.java，你可以看到：
{{{
    /* AUTO-GENERATED FILE.  DO NOT MODIFY.
     *
     * This class was automatically generated by the
     * aapt tool from the resource data it found.  It
     * should not be modified by hand.
     */

    package com.demo.android.bmi;

    public final class R {
        public static final class attr {
        }
        public static final class drawable {
            public static final int icon=0x7f020000;
        }
        public static final class layout {
            public static final int main=0x7f030000;
        }
        public static final class string {
            public static final int app_name=0x7f040000;
        }
    }
}}}

= 離線文件 =

當你處在沒有連接網路的情況下，在解壓縮後的「android-sdk/docs」 目錄中 (android_sdk/docs/reference/view-gallery.html) ，你也可以找到一份與線上文件相同的文件作參考。

= 參考函式庫 =

另一個比較方便查詢可用的介面元件的方法，則是在 Eclipse 的「Package Explorer」視窗中直接查閱 「Referenced Libraries」目錄。還記得 Referenced Libraries(參考函式庫)的作用嗎? Referenced Libraries 中列出 Android 平台所有可呼叫的類別與方法函式，也包含了 android.widget (android 介面元件)這分類。android.widget 目錄下就是所有目前可用的 Android 介面元件列表。

只是 Referenced Libraries 中不像文件一樣，並沒有提供詳細介面元件屬性可供參考。

= 整合 =

我們這就從中挑出我們需要的 TextView(文字檢視)、Button(按鈕)、EditText(編輯文字) 三種介面元件，照前面的設計擺進 LinearLayout (線性版面配置)元件中。

完整的 main.xml 描述檔如下：
{{{
    <?xml version="1.0" encoding="utf-8"?>
    <LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
        android:orientation="vertical"
        android:layout_width="fill_parent"
        android:layout_height="fill_parent"
        >
        <TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="身高 (cm)"
            />
        <EditText android:id="@+id/height"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:numeric="true"
            android:text=""
            />
        <TextView
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="體重 (kg)"
            />
         <EditText android:id="@+id/weight"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:numeric="true"
            android:text=""
            />
         <Button android:id="@+id/submit"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text="計算 BMI"
            />
         <TextView android:id="@+id/result"
            android:layout_width="fill_parent"
            android:layout_height="wrap_content"
            android:text=""
            />
	 <TextView android:id="@+id/suggest" 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content" 
	    android:text=""
	    />
    </LinearLayout>
}}}

我們可以啟動模擬器檢視執行結果。

介面元件照著 XML 描述檔的描述順利地展示了出來。而且身高體重欄位也只能輸入數字(你可以直接用電腦鍵盤輸入，或按著模擬器上綠色的虛擬數字鍵盤輸入)。

打開 R.java 檔 ，你可以看到：
{{{
    /* AUTO-GENERATED FILE.  DO NOT MODIFY.
     *
     * This class was automatically generated by the
     * aapt tool from the resource data it found.  It
     * should not be modified by hand.
     */

    package com.demo.android.bmi;

    public final class R {
        public static final class attr {
        }
        public static final class drawable {
            public static final int icon=0x7f020000;
        }
        public static final class id {
            public static final int height=0x7f050000;
            public static final int result=0x7f050003;
            public static final int submit=0x7f050002;
            public static final int suggest=0x7f050004;
            public static final int weight=0x7f050001;
        }
        public static final class layout {
            public static final int main=0x7f030000;
        }
        public static final class string {
            public static final int app_name=0x7f040000;
        }
    }
}}}

R.java 檔案中，會根據 xml 描述檔生成對應的 id 與自動指定位址。

= 革命的路還長 =

高興了沒多久，你發現按下"計算 BMI" 按鈕後，應用程式完全沒反應。

這是正常的，因為我們還沒處理從介面輸入取得身高體重、將數值導入 BMI 計算方式、將結果輸出到螢幕上...等等 BMI 應用程式的關鍵內容哩。接著，我們就來開始觀察 Android 程式的流程吧。

= 參考 =

目前的 ADT 版本還沒提供方便地視覺化拖拉介面元件的介面開發方式。鑑於目前 ADT 版本還很低，以後也許會加入這樣的 GUI 拖拉設計工具。
不過也已經有人寫出來了對應 Android 的 GUI 拖拉設計工具。

DroidDraw - Android GUI 拖拉設計工具
http://code.google.com/p/droiddraw/

< [AndroidUI 描述使用者介面] | [DiveIntoAndroid 回目錄] | [AndroidLogic 程式流程] >