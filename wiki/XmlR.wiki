#summary 存取識別符號
#labels tw

{{{
狀態: 未完成
}}}
    
在上一章談了 EditText 中的各種「android:」開頭的屬性後，還有個擺在各屬性最前頭的「android:id」屬性沒談。要使用一個介面元件的第一件事是定義出介面描述檔。程式會透過 android:id 屬性來調用特定介面元件，之後與這個介面有關的操作，都得根據 android:id 來在程式中調用這個介面元件。

{{{
    <EditText android:id="@+id/height"
        />
}}}

i前面說過，為了易於閱讀(可讀性)，最好將屬性分行列出。而我們的範例卻將 android:id 屬性直接擺在 EditText 標籤後。其實這麼做同樣是為了易於閱讀，當然你也可以將「android:id」屬性分行列出，或是將「android:id」屬性放在屬性列表的中間或最後頭。

android:id 屬性的內容長得比較特別：
{{{
    @+id/height
}}}

「height」是這個介面元件的 android:id。以後的程式中會使用「R.id.height」來取得這個介面元件。「＠+id」 的意思是我們可以通過這個識別符號來控制所對應的介面元件，「R」類別會自動配置一個位址給這個介面元件。
「R」類別的內容則可以透過查看 R.java 得知。


XML 描述檔與 R.java 檔

在 Android 系統中，我們使用 XML 來定義 UI。但是有些稍微有經驗的開發者可能會有疑問：「用 XML 來描述介面固然方便，但是對於手機程式來說，直接用 XML 檔案是不是太占空間了？」。沒錯，如果 Android 是直接使用 XML 來儲存介面描述到手機上的話，一定會佔用比起現在大的多的檔案空間。解決的方法是Android 並不直接使用 XML 檔案，而是透過 Android 開發工具，自動將 XML 描述檔轉換成資源檔案。一旦應用程式要使用某個介面或是任何種類的資源(字串、圖片、圖示、音效...)，都使用索引來查詢。

當你建立一個新專案，打開它的 src/com/demo/android/com/R.java 檔，你可以看到如下的程式碼：

{{{
    /* AUTO-GENERATED FILE.  DO NOT MODIFY.
     *
     * This class was automatically generated by the
     * aapt tool from the resource data it found.  It
     * should not be modified by hand.
     */

    package com.demo.android.bmi;

    public final class R {
        public static final class attr {
        }
        public static final class drawable {
            public static final int icon=0x7f020000;
        }
        public static final class layout {
            public static final int main=0x7f030000;
        }
        public static final class string {
            public static final int app_name=0x7f040000;
        }
    }
}}}

在照著前一章新增了 XML 描述後，再次打開 src/com/demo/android/com/R.java 檔 ，你可以看到如下的程式碼：
{{{
    /* AUTO-GENERATED FILE.  DO NOT MODIFY.
     *
     * This class was automatically generated by the
     * aapt tool from the resource data it found.  It
     * should not be modified by hand.
     */

    package com.demo.android.bmi;

    public final class R {
        public static final class attr {
        }
        public static final class drawable {
            public static final int icon=0x7f020000;
        }
        public static final class id {
            public static final int height=0x7f050000;
            public static final int result=0x7f050003;
            public static final int submit=0x7f050002;
            public static final int suggest=0x7f050004;
            public static final int weight=0x7f050001;
        }
        public static final class layout {
            public static final int main=0x7f030000;
        }
        public static final class string {
            public static final int app_name=0x7f040000;
        }
    }
}}}

我們看到在 R.java 檔案中，分別有 attr (屬性)、drawable (圖片、圖示)、id (識別符號)、layout (介面描述)、string (文字) 這幾種資源型態，就 XML 描述檔中的 id 來說，開發工具會根據 XML 描述檔中指定的 id，生成對應的資源，並自動指定一個位址。

== 將字串抽離 XML ==



完整的程式碼如下
{{{
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">BMI</string>
    <string name="app_version">0.1</string>
    <string name="height">身高 (cm)</string>
    <string name="weight">體重 (kg)</string>
    <string name="bmi_btn">計算 BMI</string>
    <string name="bmi_result">你的 BMI 值是 </string>
</resources>
}}}

{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:orientation="vertical"
    android:layout_width="fill_parent"
    android:layout_height="fill_parent"
    >
	<TextView 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content" 
	    android:text="@string/height"
	    />
	<EditText android:id="@+id/height" 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content" 
	    android:numeric="true"
	    android:text=""
	    />
	<TextView 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content" 
	    android:text="@string/weight"
	    />
	<EditText android:id="@+id/weight" 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content"
	    android:numeric="true"
	    android:text=""
	    />
	<Button android:id="@+id/submit" 
	    android:layout_width="wrap_content" 
	    android:layout_height="wrap_content" 
	    android:text="@string/bmi_btn"
	    />
	 <TextView android:id="@+id/suggest" 
	    android:layout_width="fill_parent" 
	    android:layout_height="wrap_content" 
	    android:text=""
	    />
</LinearLayout>
}}}


接著，我們就來開始觀察 Android 程式的流程吧。

< [BmiUI 設計使用者介面] | [DiveIntoAndroid 回目錄] | [AndroidLogic 解讀程式流程] >